<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <title>{{ ui.page_title }}</title>
    <meta name="description" content="{{ ui.page_description }}" />
    <link href="https://unpkg.com/tailwindcss@^2/dist/tailwind.min.css" rel="stylesheet" />
    <style>

        html {
            height: 100vh;
        }

        body {
            height: 100%;
            margin: 0;
            padding: 0;
        }

        .chat-body {
            margin: 25px auto;
        }
        /* Small devices (portrait tablets and large phones, 600px and up) */
        @media only screen and (min-width: 600px) {
            .chat-body {
                width: 590px;
            }
        }

        /* Medium devices (landscape tablets, 768px and up) */
        @media only screen and (min-width: 768px) {
            .chat-body {
                width: 700px;
            }
        }

        /* Large devices (laptops/desktops, 992px and up) */
        @media only screen and (min-width: 992px) {
            .chat-body {
                width: 900px;
            }
        }
        .card-body {
            background-color: #333;
            color: #fff;
            border-radius: 10px;
        }
        .server-message {
            background-color: #444;
            padding: 10px;
            margin: 10px 0;
            border-radius: 10px;
        }
        .client-message {
            background-color: #555;
            padding: 10px;
            margin: 10px 0;
            border-radius: 10px;
        }
        .form-inline {
            display: flex;
            justify-content: space-between;
        }
        .form-control {
            width: 80%;
            background-color: #444;
            color: #fff;
            border: none;
            border-radius: 5px;
            padding: 10px;
            margin-right: 10px;
        }
        #messages {
            max-height: calc(100vh - 300px);
        }
        #send {
            background-color: #005673;
            color: #fff;
            border: none;
            border-radius: 5px;
            padding: 10px 20px;
        }
        .form-message {
          margin-top: 10px;
        }
        .header {
            color: #DDD;
            line-height: 1.35;
            width: 100%;
            display: flex;
            justify-content: start;
        }
        .header-title {
            font-size: 1.5rem;
            font-family: 'Poppins', 'Roboto', sans-serif;
            letter-spacing: 0rem;
            font-kerning: normal;
            font-weight: 600;
            vertical-align: middle;
        }
        .spacer {
            flex-grow: 1;
        }
        {% include 'custom.css' %}
    </style>
    <script>

        const chatbotName = "{{ ui.chat_bot_name }}";
        const chatVariant = "{{ chat_variant }}";

        function getWsEndpoint() {
            var protocol = window.location.protocol === "https:" ? "wss:" : "ws:";
            var endpoint = protocol + "//" + window.location.host + "/chat";
            return endpoint;
        }
        const endpoint = getWsEndpoint();
        const ws = new WebSocket(endpoint);
        // Receive message from server word by word. Display the words as they are received.
        ws.onmessage = function (event) {
            var messages = document.getElementById('messages');
            var data = JSON.parse(event.data);
            if (data.sender === "bot") {
                if (data.type === "start") {
                    var header = document.getElementById('header');
                    header.innerHTML = "Computing answer...";
                    var div = document.createElement('div');
                    div.className = 'server-message';
                    var p = document.createElement('p');
                    p.innerHTML = "<strong>" + chatbotName + ": " + "</strong>";
                    div.appendChild(p);
                    messages.appendChild(div);
                } else if (data.type === "stream") {
                    var header = document.getElementById('header');
                    header.innerHTML = chatbotName + " is typing...";
                    var p = messages.lastChild.lastChild;
                    if (data.message === "\n") {
                        p.innerHTML += "<br>";
                    } else {
                        p.innerHTML += data.message;
                    }
                } else if (data.type === "info") {
                    var header = document.getElementById('header');
                    header.innerHTML = data.message;
                } else if (data.type === "end") {
                    var header = document.getElementById('header');
                    header.innerHTML = "Ask a question";
                    var button = document.getElementById('send');
                    button.innerHTML = "Send";
                    button.disabled = false;
                } else if (data.type === "error") {
                    var header = document.getElementById('header');
                    header.innerHTML = "Ask a question";
                    var button = document.getElementById('send');
                    button.innerHTML = "Send";
                    button.disabled = false;
                    var p = messages.lastChild.lastChild;
                    p.innerHTML += data.message;
                }
            } else {
                var div = document.createElement('div');
                div.className = 'client-message';
                var p = document.createElement('p');
                p.innerHTML = "<strong>" + "You: " + "</strong>";
                p.innerHTML += data.message;
                div.appendChild(p);
                messages.appendChild(div);
            }
            // Scroll to the bottom of the chat
            messages.scrollTop = messages.scrollHeight;
        };
        // Send message to server
        function sendMessage(event) {
            event.preventDefault();
            var message = document.getElementById('messageText').value;
            if (message === "") {
                return;
            }
            const payload = {
                "message": message,
                "chat_variant": chatVariant
            };
            ws.send(JSON.stringify(payload));
            document.getElementById('messageText').value = "";

            // Turn the button into a loading button
            var button = document.getElementById('send');
            button.innerHTML = "Loading...";
            button.disabled = true;
        }
    </script>
</head>
<body class="bg-black">
    {% if ui.show_header %}
    <div class="header">
        {% if ui.header_center %}
        <div class="spacer"></div>
        {% endif %}
        {% if ui.header_logo_src %}
        <a href="{{ ui.header_logo_href }}" class="header-logo">
            <img src="{{ ui.header_logo_src }}" alt="{{ ui.header_logo_alt }}" class="w-32 mx-auto">
        </a>
        {% endif %}
        <h2 class="header-title">{{ ui.header_title }}</h2>
        <div class="spacer"></div>
    </div>
    {% endif %}
    <div class="chat-body card">
        <div class="card-body p-5">
            <p class="card-text text-center text-sm" id="header"> Ask a question </p>
            <hr class="border-gray-500 mb-5" style="margin-top: 20px;">
            <div id="messages" class="overflow-auto">
            </div>
            <form action="" class="form-inline mt-5" id="chat-form" onsubmit="sendMessage(event)">
                <input type="text" class="form-control" placeholder="Write your question" id="messageText">
                <button id="send" type="submit" class="btn btn-primary">Send</button>
            </form>
        </div>
    </div>
</body>
<script id="webvitals">
(function () {
    var script = document.createElement('script');
    script.onload = () => {
    window.GrafanaFaroWebSdk.initializeFaro({
        url: 'https://grafana-agent.savantly.apps.savantly.cloud/collect',
        app: {
        name: 'base-bot',
        version: '{{ ui.version }}',
        },
    });
    };
    script.src = 'https://cdn.jsdelivr.net/npm/@grafana/faro-web-sdk@1.1.4/dist/bundle/faro-web-sdk.iife.min.js';
    document.head.appendChild(script);
})();
</script>
</html>